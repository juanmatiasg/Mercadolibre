● Como usuario quiero poder realizar una búsqueda en MercadoLibre
ingresando en un campo de texto aquellos términos que me interesan

1)Primero hay que usar el permiso de Internet en el Manifest porque sino no podemos usar El API de Mercadolibre

<uses-permission android:name="android.permission.INTERNET" />

2) Crear la Interfaz del API

 @GET("sites/MLA/search?q=")  /*Se busca todos los productos*/
 fun searching(@Query("q") q:String):Call<BaseProductos>

3) Crear el modelo de la Clase 

class BaseProductos(@SerializedName("query") var query: String, @SerializedName("results") var items: ArrayList<Items>) {

}

class Items(
    @SerializedName("id")
    var id:String,
    @SerializedName("title")
    var title:String,
    @SerializedName("price")
    var price:Double,
    @SerializedName("thumbnail")
    var thumbnail:String,
    @SerializedName("descriptions")
    var descriptions:ArrayList<Descripcion>

) {
}

4) Crear un metodo del Retrofit

private fun getRetrofit(): Retrofit {
        return Retrofit.Builder()
                .baseUrl("https://api.mercadolibre.com/")
                .addConverterFactory(GsonConverterFactory.create())
                .build()

   }

5) Crear un metodo para buscar id del productos  

fun buscarPorId(query: String) { /*Funciona*/
        hideKeyboard() /*Oculto el teclado cuando busco por id*/
        var service = getRetrofit().create(MercadoLibreApi::class.java)
        service.search(query).enqueue(object : Callback<Items> {
            override fun onFailure(call: Call<Items>, t: Throwable) {
                Toast.makeText(this@MainActivity, "No hay conexion", Toast.LENGTH_SHORT).show()
            }

            override fun onResponse(call: Call<Items>, response: Response<Items>) {
                if (response.isSuccessful) {
                    var jsonRespuesta = response.body() as Items
                    var lista: ArrayList<Items> = ArrayList()
                    lista.add(jsonRespuesta)

                    mAdapter.ProductosAdapter(lista, this@MainActivity)
                    mRecyclerView.adapter = mAdapter


                }

            }


        })

    }

6) Crear un metodo para buscar varios Productos que me interesa

private fun search(term: String) {
        hideKeyboard() /*Oculta el teclado cuando lo busco*/

        var service = getRetrofit().create(MercadoLibreApi::class.java)
        service.searching(term).enqueue(object : Callback<BaseProductos> {
            override fun onFailure(call: Call<BaseProductos>, t: Throwable) {
                Toast.makeText(this@MainActivity, "No se han encontrado el Articulo", Toast.LENGTH_SHORT).show()
            }

            override fun onResponse(call: Call<BaseProductos>, response: Response<BaseProductos>) {
                if (response.isSuccessful) {
                    var productoRespuesta = response.body() as BaseProductos
                    var lista = productoRespuesta.items

                    mAdapter.ProductosAdapter(lista, this@MainActivity)
                    mRecyclerView.adapter = mAdapter
		    buscarPorId(term) /*Llamo al metodo buscar por ID*/
                }

            }

        })
   }
  
6) funcion onCreate en donde se lanza la aplicacion

	searchAction.setOnClickListener { search(searchText.text.toString()) } /*Metodo donde se ejecuta la busqueda  */
	searchAction es el id del boton de la vista activity_main.xml 
	search es el metodo en donde paso por parametro el searchText.text.toString() de la vista activity_main.xml


● Como usuario quiero poder quiero poder visualizar un listado de Productos que se hayan encontrado al realizar una busqueda

1) En la interfaz del Api creo un metodo 

@GET("sites/MLA/search?q=articulos")  /*Obtiene Todos los Articulos*/
 fun getAll():Call<BaseProductos>

2) En el MainActivity creo una funcion para mostrar el listado de productos
fun obtenerTodo() { 
        var servicio = getRetrofit().create(MercadoLibreApi::class.java)
        servicio.getAll().enqueue(object : Callback<BaseProductos> {
            override fun onFailure(call: Call<BaseProductos>, t: Throwable) {
                Toast.makeText(this@MainActivity, "No hay conexion", Toast.LENGTH_SHORT).show()
            }

            override fun onResponse(call: Call<BaseProductos>, response: Response<BaseProductos>) {
                if (response.isSuccessful) {

                    var productoRespuesta = response.body() as BaseProductos
                    var lista = productoRespuesta.items

                    mAdapter.ProductosAdapter(lista, this@MainActivity)
                    mRecyclerView.adapter = mAdapter

                }


            }


        })

    }

3) En la funcion OnCreate del MainActivity llamo a la funcion obtenerTodo()

● Como usuario quiero poder visualizar el detalle de un Producto al clickear
su ítem en el listado. Dicho detalle debe incluir más información que la
mostrada en el el listado.


En la clase ViewHolder , llamo a la variable cardView y hago una funcion cuando hago click al item , me lleva a otra Activity



class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {

    var id = view.findViewById<TextView>(R.id.textViewId)
    var title = view.findViewById<TextView>(R.id.textViewTItle)
    var price = view.findViewById<TextView>(R.id.textViewPrecio)
    var photos = view.findViewById<ImageView>(R.id.imageView)
    var cardView = view.findViewById<CardView>(R.id.cardView)
    var check = view.findViewById<CheckBox>(R.id.checkbox)
    var btnAgregar = view.findViewById<Button>(R.id.btnAgregar)



    fun bind(json: Items, position: Int) {

        id.text = "ID: " + json.id
        title.text = "Titulo: " + json.title
        price.text = "Precio: " + json.price.toString() + "$"
        photos.loadUrl(json.thumbnail)


        val sharedPreferences = check.context.getSharedPreferences(check.context.getString(R.string.shared_key), Context.MODE_PRIVATE)
        check.isChecked = sharedPreferences.getBoolean(json.id, false)


        cardView.setOnClickListener(object : View.OnClickListener {  /*Hago click en el cardView y me lleva a otra activity*/

            override fun onClick(v: View) {


                var intent = Intent(v.context, DescripcionActivity::class.java)
                intent.putExtra("Image", json.thumbnail)
                intent.putExtra("Title", title.text.toString())
                intent.putExtra("Price", price.text.toString())


                /*Creo la variable service y llamo a la interfaz del API , paso por parametro el id que necesita para
                * obtener la descripcion del producto*/

                var service = Api.getRetrofit()
                service.getAllDescriptions(json.id).enqueue(object : Callback<Descripcion> {
                    override fun onFailure(call: Call<Descripcion>, t: Throwable) {
                        Log.i(MainActivity.TAG, "No hay datos")
                    }

                    override fun onResponse(call: Call<Descripcion>, response: Response<Descripcion>) {
                        var respuesta = response.body() as Descripcion

                        intent.putExtra("Descripcion", respuesta.plain_text)


                        v.context.startActivity(intent) /*otra Activity(Descripcion)*/


                    }

                })


            }

        })


    }


    fun ImageView.loadUrl(url: String) {
        Picasso.get().load(url).into(imageView)

    }


/*-------------------------------Activity Descripcion------------------------*/

class DescripcionActivity : AppCompatActivity() {

    lateinit var imageSlider: ImageSlider

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_descripcion)


        var bundle: Bundle? = intent.extras

        var title: String? = bundle!!.getString("Title") /*obtengo el extra de Title*/
        var price: String? = bundle.getString("Price")	/*obtengo el extra de Price*/
        var Image: String? = bundle.getString("Image")  /*obtengo el extra de Image*/
        var Descripcion: String? = intent.getStringExtra("Descripcion") /*Obtengo el extra de Descripcion que hice una llamada al Api cuando pase por parametro el id -> obtengo la descripcion del producto*/


        textViewTitleDescripcion.setText(title)  
        textViewPriceDescripcion.setText(price)  
        Picasso.get().load(Image).into(imageViewDescripcion)
        textViewDescripcion.setText(Descripcion)


    }


}



}